This is an API wrapper for Shotgun. This wrapper should be used by scripts that
are only quickly connecting, making a query and then disconnecting. It provides
a speed improvement over the regular Shotgun API.

# -----------------------------------------------------------------------------
Purpose
# -----------------------------------------------------------------------------
The regular Shotgun API can be slow when initializing a Shotgun object. It can
add anywhere from .5 to 5 seconds onto the startup time. Once connected,
however, talking to the database can be quite fast. This can cause an annoyance
for tools that simply need to connect to grab one piece of data and then 
disconnect. Think along the lines of setting a shot's frame range upon opening
a Maya file or Nuke script.

# -----------------------------------------------------------------------------
Concept
# -----------------------------------------------------------------------------
The concept behind this wrapper is quite simple. Using the knowledge above that
Shotgun can be slow to connect, but speedy once connected, I have just removed
the requirement of making a new connection every single time. Instead, this
wrapper creates a single connection to the Shotgun database, leaving it open
indefinitely. We then also open up a socket. Our wrapper, which looks exactly
like the regular Shotgun API, also takes a host and port argument. Rather than
establishing a new connection using the regular method included in the Shotgun
object, it connects to that socket. Then, when we send requests to Shotgun,
those requests are sent through the socket to the existing Shotgun connection,
it quickly does the query and then sends the results back through.

# -----------------------------------------------------------------------------
Example Usage
# -----------------------------------------------------------------------------
Look at the files inside the tests directory for examples of how to use this API
wrapper. You will need to create a config file, named config.py, in the tests
folder and put your Shotgun script authorization details in there. The variable
names should be named as followed:

SERVER_PATH
SCRIPT_NAME
SCRIPT_KEY

Run the serverTest.py file first to initialize your DoubleBarrelServer. Once it
is initialized, run wrapperTest.py. The wrapper test will loop 100 times,
sending requests to the server instance and then getting back the results. It
will print the results each time and then when it is finished it will tell you
how long it took to do the 100 queries.

Next, it will loop another 100 times, but this time will fetch the data from
Shotgun without the aid of the DoubleBarrelServer. It will use the regular 
Shotgun API instead (still creating a DoubleBarrel instance without providing
a host and port is the same as a regular Shotgun object).